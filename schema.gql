# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Add Contact Info Args"""
input AddContactInput {
  address: String
  birthday: DateTime!
  cnpj: String
  companyID: String!
  cpf: String
  creditType: String
  email: String!
  name: String!
  opportunityValue: Float
  personType: String!
  phone: String
  propertyID: String
  propertyValue: Float
  term: Int
}

"""Add a deal category to the partner arguments."""
input AddPartnerDealCategoryInput {
  dealCategoryID: String!
}

"""Add Contact Info Args"""
input AddVehicularCreditContactInput {
  address: String
  birthday: DateTime!
  clientSituation: String!
  cnpj: String
  companyID: String!
  contactMonthlyIncome: Float!
  cpf: String
  email: String!
  name: String!
  opportunityValue: Float
  personType: String!
  phone: String
  vehicleManufacturedDate: String!
  vehicleModel: String!
  vehicleName: String!
  vehicleTargetValue: Float!
  vehicleValue: Float!
  vehicularCreditType: String!
}

"""Partner Authentication"""
input AuthenticatePartnerInput {
  email: String!
  password: String!
}

"""Login Schema"""
type AuthenticatePartnerSchema {
  partner: Partner!
  token: String!
}

"""Company's Authentication Args"""
input AuthenticationCompanyInput {
  email: String!
  password: String!
}

"""The basic company schema"""
type BasicCompany {
  """The company email"""
  email: String!
  id: ID!

  """The company name"""
  name: String!
  phone: String
}

"""Contact schema"""
type BitrixContact {
  COMPANY_ID: Int
  CREATED_BY_ID: Int
  DATE_CREATE: String
  DATE_MODIFY: String
  EMAIL: [ContactInfo!]
  ID: Int!
  LAST_NAME: String
  NAME: String
  PHONE: [ContactInfo!]

  """Contact CPF"""
  UF_CRM_1602185690: String

  """Contact CNPJ"""
  UF_CRM_1607694757: String
}

"""The company deal's schema"""
type BitrixDeal {
  ADDITIONAL_INFO: String
  COMMENTS: String
  COMPANY_ID: Int
  CONTACT_ID: Int
  CURRENCY_ID: String
  DATE_CREATE: String
  DATE_MODIFY: String
  ID: Int!
  OPPORTUNITY: Float
  STAGE_ID: String
  TITLE: String
}

"""Deal Category"""
type BitrixDealCategory {
  CREATED_DATA: DateTime!
  ID: ID!
  IS_LOCKED: String!
  NAME: String!
  SORT: Int!
}

"""Bitrix Deal Field"""
type BitrixDealField {
  items: [BitrixDealFieldItem!]
  key: String!
  listLabel: String
}

"""Bitrix Deal Field Item"""
type BitrixDealFieldItem {
  ID: ID!
  VALUE: String!
}

"""Bitrix Timeline Comment"""
type BitrixTimeLineComment {
  AUTHOR_ID: Int!
  COMMENT: String!
  CREATED: String!
  ENTITY_TYPE: String!
  FILES: [BitrixTimelineFile!]
  ID: Int!
}

"""Bitrix File"""
type BitrixTimelineFile {
  date: String!
  id: Int!
  name: String!
  type: String!
  urlDownload: String!
}

"""
Change company email arguments. You should be an administrator to change a company email
"""
input ChangeCompanyEmailInput {
  companyID: String!
  newEmail: String!
}

"""Change company role arguments"""
input ChangeCompanyRoleInput {
  roleID: String!
}

"""Change partner information arguments"""
input ChangePartnerInformationInput {
  companyName: String!
  name: String!
  password: String!
  phone: String!
}

"""Change partner password arguments"""
input ChangePartnerPasswordInput {
  """The new password"""
  newPassword: String!

  """Your current password"""
  oldPassword: String!
}

"""Change Partner URL Use Case"""
input ChangePartnerURLInput {
  partnerID: String!
  url: String!
}

"""Change platform colors arguments"""
input ChangePlatformColorsInput {
  """Primary color (HEX)"""
  primaryColor: String!

  """Secondary color (HEX)"""
  secondaryColor: String!
}

"""The company schema"""
type Company {
  """
  It should be used to provide a time access limitation for a user through a jwt token.
  """
  accessToken: String
  avatarBitrixFileID: Float
  avatarFile: String

  """The ID returned from Bitrix platform"""
  bitrix_id: Int
  cpf_cnpj: String!
  createdAt: DateTime

  """Eduzz Bill ID"""
  eduzzBillID: Float

  """Eduzz recurrence code"""
  eduzzRecurrenceCode: Float

  """The company email"""
  email: String!
  haveLifetimeAccess: Boolean
  id: ID!
  isSuspended: Boolean
  logoBitrixFileID: Float

  """The company name"""
  name: String!

  """
  The hashed company's password. it should not be returned at any request
  """
  password: String

  """The person name"""
  personName: String!
  phone: String
  roleId: Role
  sawTutorial: Boolean
  simulations: [Simulation!]
  updatedAt: DateTime

  """The user name"""
  userName: String
}

"""Contact schema"""
type Contact {
  COMPANY_ID: Int
  CREATED_BY_ID: Int
  DATE_CREATE: DateTime
  DATE_MODIFY: DateTime
  EMAIL: [ContactInfo!]
  ID: Int!
  LAST_NAME: String
  NAME: String
  PHONE: [ContactInfo!]
}

"""Contact Info Schema"""
type ContactInfo {
  ID: Int!
  VALUE: String!
  VALUE_TYPE: String!
}

"""
Create Associate Partner Arguments. You should be a partner to create an associate user
"""
input CreateAssociateInput {
  companyName: String!
  cpf_cnpj: String!
  email: String!
  name: String!
  phone: String!
}

"""Create Basic Company Args"""
input CreateBasicCompanyInput {
  email: String!
  name: String!
  phone: String!
}

"""Create Company Args"""
input CreateCompanyInput {
  bitrix_id: Float
  cpf_cnpj: String
  email: String!
  name: String!
  password: String!
  personName: String!
  phone: String!
  token: String!
}

"""Create Company Args"""
input CreateCompanyInputType {
  cpf_cnpj: String
  eduzzBillID: Int!
  email: String!
  name: String!
  personName: String!
  phone: String!
  recurrence_code: Int!
  timeToExpireToken: String!
}

"""Create Deal Category Input"""
input CreateDealCategoryInput {
  bitrixProductsField: String
  bitrix_id: Int!
  isInDevelopment: Boolean!
  isVisible: Boolean!
  name: String
  url: String
}

"""Create Deal Type Input"""
input CreateDealProductInput {
  averageRate: Float!
  bitrix_id: String
  competitiveRate: Float!
  dealCategoryID: String!
  maxNumberOfInstallments: Int!
  name: String!
}

"""C"""
input CreatePartnerExchangeDealForLegalPersonInput {
  addressNumber: String!
  birthday: DateTime!
  city: String!
  cnpj: String!
  companyAddress: String!
  companyID: String!
  complement: String!
  corporateName: String!
  district: String!
  email: String!
  fantasyName: String!
  mainActivity: String!
  name: String!
  opportunityValue: Float!
  personType: String!
  phone: String!
  uf: String!
}

"""Input arguments to create a new Exchange deal for physical person"""
input CreatePartnerExchangeDealForPhysicalPersonInput {
  UF: String!
  birthday: DateTime!
  cellPhone: String!
  city: String!
  companyID: String!
  cpf: String!
  district: String!
  doesTheCustomerHaveAnyRelevantRole: String!
  email: String!
  gender: String!
  homeAddress: String!
  interestComment: String!
  maritalStatus: String!
  monthlyIncome: Float!
  name: String!
  nationality: String!
  naturalness: String!
  opportunityValue: Float!
  personType: String!
  phone: String!
  profession: String!
  rg: String!
  rgIssueDate: DateTime!
  rgIssuingAgency: String!
  zipCode: String!
}

"""
Create Partner Arguments. You should be an administrator to create a partner
"""
input CreatePartnerInput {
  companyName: String!
  cpf_cnpj: String!
  email: String!
  name: String!
  password: String!
  phone: String!
  siteURL: String!
}

"""Add real estate to partner arguments"""
input CreatePartnerRealEstateDealInput {
  address: String
  birthday: DateTime!
  cnpj: String
  companyID: String!
  cpf: String
  creditType: String
  email: String!
  name: String!
  opportunityValue: Float
  personType: String!
  phone: String
  propertyID: String
  propertyValue: Float
  term: Int
}

"""Create simulation input data"""
input CreatePartnerSimulationInput {
  amortizationType: Int!
  birthday: DateTime!
  cpf_cnpj: String!
  dealCategoryID: String!
  dealProductID: String
  email: String!
  name: String!
  numberOfInstallments: Int!
  personType: String!
  phone: String!
  value: Float!
}

"""Add Contact Info Args"""
input CreatePartnerVehicularDealInput {
  address: String
  birthday: DateTime!
  clientSituation: String!
  cnpj: String
  companyID: String!
  contactMonthlyIncome: Float!
  cpf: String
  email: String!
  name: String!
  opportunityValue: Float
  personType: String!
  phone: String
  vehicleManufacturedDate: String!
  vehicleModel: String!
  vehicleName: String!
  vehicleTargetValue: Float!
  vehicleValue: Float!
  vehicularCreditType: String!
}

"""Create simulation input data"""
input CreateSimulationInput {
  amortizationType: Int!
  birthday: DateTime!
  cpf_cnpj: String!
  dealCategoryID: String!
  dealProductID: String!
  email: String!
  name: String!
  numberOfInstallments: Int!
  personType: String!
  phone: String!
  value: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""Deal category schema"""
type DealCategory {
  bitrixProductsField: String!
  bitrix_id: Int!

  """Created date of the model"""
  createdAt: DateTime
  id: ID!

  """It describes if the deal is in development or not"""
  isInDevelopment: Boolean!
  isVisible: Boolean
  name: String!
  products: [DealProduct!]

  """Created date of the model"""
  updatedAt: DateTime

  """Url to do a deal request"""
  url: String
}

"""Deal Category Stage"""
type DealCategoryStage {
  NAME: String!
  SORT: Int!
  STATUS_ID: String!
}

"""Deal product schema"""
type DealProduct {
  averageRate: Float
  bitrix_id: Int
  competitiveRate: Float

  """Created date of the model"""
  createdAt: DateTime
  dealCategory: DealCategory!
  id: ID!
  maxNumberOfInstallments: Int
  name: String!

  """Created date of the model"""
  updatedAt: DateTime
}

"""Delete Deal Category Input"""
input DeleteDealCategoryInput {
  id: String!
}

input DeleteDealProductInput {
  id: String!
}

"""Delete a Partner's deal category arguments"""
input DeletePartnerDealCategoryInput {
  """Partner's deal category id"""
  partnerDealCategoryID: String!
}

"""Delete partner arguments"""
input DeletePartnerInput {
  id: String!
}

"""Delete Simulation Mutation Input"""
input DeleteSimulationInput {
  id: String!
}

input EditDealProductInput {
  averageRate: Float!
  competitiveRate: Float!
  id: String!
  maxNumberOfInstallments: Int!
  name: String
}

"""Files to store at our system"""
input FileInput {
  """The file as a BASE64"""
  file: String!

  """The file name"""
  fileName: String!
}

"""Get Bitrix Deal Field Items Input"""
input GetBitrixDealFieldItemsInput {
  dealFieldKey: String!
}

"""Get contact arguments"""
input GetCompanyContactInput {
  contactID: Int!
}

"""Get Company Info Args"""
input GetCompanyInfoInput {
  id: String!
}

"""Add Contact Info Args"""
input GetContactsInput {
  page: Int
}

"""The schema response for get deals service request."""
type GetContactsResponse {
  """
  If there are more deals, the bitrix api should return a number to get the next list of deals
  """
  next: Int

  """The list of Deals gathered from bitrix api."""
  result: [Contact!]

  """The number of deals gathered."""
  total: Int
}

"""Input for get deal category stages"""
input GetDealCategoryStageInput {
  dealCategoryID: String!
}

"""Get Deal Input Arguments"""
input GetDealsInput {
  page: Int
}

"""The schema response for get deals service request."""
type GetDealsResponse {
  """
  If there are more deals, the bitrix api should return a number to get the next list of deals
  """
  next: Int

  """The list of Deals gathered from bitrix api."""
  result: [BitrixDeal!]

  """The number of deals gathered."""
  total: Int!
}

"""Get Deals Input Arguments"""
input GetDealsUpdatedInput {
  dealCategoryID: String!
  page: Int
}

"""Deal's information schema"""
type GetPartnerDealsInformationSchema {
  completedDealsAmount: Float!
  numberOfActiveDeals: Int!
  numberOfCompletedDeals: Int!
  numberOfRegisteredAssociates: Int!
}

"""Get Deals Input Arguments"""
input GetPartnerDealsInput {
  dealCategoryID: String
  page: Int
}

"""Get Partner Deals Output Schema. This will return a pagination"""
type GetPartnerDealsSchema {
  """
  If there are more deals, you can pass this value as an argument into page parameter to get the next page of deals
  """
  next: Int

  """The list of deals"""
  result: [BitrixDeal!]

  """The number of deals gathered"""
  total: Int!
}

"""Get partner information arguments"""
input GetPartnerInformationInput {
  partnerID: String!
}

"""Get partner styles arguments"""
input GetPartnerStyleInput {
  """ID of the partner master"""
  partnerID: String!
}

"""Get partner platform logo query arguments"""
input GetPlatformLogoInput {
  partnerID: String!
}

"""Get Simulation Installments Input"""
input GetSimulationInstallmentsInput {
  loanAmount: Float!

  """A percentage value"""
  loanInterest: Float!
  numberOfInstallments: Int!
}

"""Price Table Installment Schema"""
type Installment {
  amortization: Float!
  amount: Float!
  installment: Float!
  interest: Float!
}

"""List Deal Comments Timeline schema"""
type ListDealCommentsTimeLineSchema {
  result: [BitrixTimeLineComment!]
  total: Int!
}

"""Get Deal Input Arguments"""
input ListDealTimelineCommentsInput {
  id: Int!
}

"""Get contacts input"""
input ListPartnerContactsInput {
  """The page to get contacts"""
  page: Int
}

"""
Get partner contacts response schema. If the partner have a master role, the contact will be of all associates
"""
type ListPartnerContactsSchema {
  """
  If there are more deals, the bitrix api should return a number to get the next list of deals
  """
  next: Int

  """The list of contacts gathered from bitrix api."""
  result: [Contact!]

  """The number of deals gathered."""
  total: Int
}

"""Login Schema"""
type Login {
  company: Company!
  token: String!
}

type Mutation {
  CreatePartner(data: CreatePartnerInput!): Partner!
  addCompany(data: CreateCompanyInputType!): Company!

  """
  Add a deal category to the partner. You should be a partner master and be authenticated.
  """
  addPartnerDealCategory(data: AddPartnerDealCategoryInput!): PartnerDealCategory!
  addRealEstateContact(data: AddContactInput!): BitrixDeal!
  addVehicularCreditContact(data: AddVehicularCreditContactInput!): BitrixDeal!

  """
  You can use this mutation to change a company email. To do it, you should be an administrator user
  """
  changeCompanyEmail(data: ChangeCompanyEmailInput!): Company!
  changeCompanyRole(data: ChangeCompanyRoleInput!): Company!

  """Change partner information mutation"""
  changePartnerInformation(data: ChangePartnerInformationInput!): Partner!

  """
  Change the partner password mutation. The partner must be authenticated to change it password
  """
  changePartnerPassword(data: ChangePartnerPasswordInput!): Partner!
  changePartnerURL(data: ChangePartnerURLInput!): Partner!
  changePlatformColors(data: ChangePlatformColorsInput!): PartnerStyleSchema!
  confirmTutorialHasBeenViewed: Company!
  createBasicCompany(data: CreateBasicCompanyInput!): BasicCompany!
  createCompany(data: CreateCompanyInput!): Company!

  """Create a deal category mutation"""
  createDealCategory(data: CreateDealCategoryInput!): DealCategory!
  createDealProduct(data: CreateDealProductInput!): DealProduct!

  """
  Create a associate partner. You should be a partner to create your associates
  """
  createPartnerAssociate(data: CreateAssociateInput!): Partner!
  createPartnerExchangeDealForLegalPerson(data: CreatePartnerExchangeDealForLegalPersonInput!): BitrixDeal!
  createPartnerExchangeDealForPhysicalPerson(data: CreatePartnerExchangeDealForPhysicalPersonInput!): BitrixDeal!

  """Create a real estate deal for a partner"""
  createPartnerRealEstate(data: CreatePartnerRealEstateDealInput!): BitrixDeal!
  createPartnerSimulation(data: CreatePartnerSimulationInput!): Simulation!

  """Create a vehicular deal for a partner"""
  createPartnerVehicularDeal(data: CreatePartnerVehicularDealInput!): BitrixDeal!
  createSimulation(data: CreateSimulationInput!): Simulation!
  deleteDealCategory(data: DeleteDealCategoryInput!): DealCategory!
  deleteDealProduct(data: DeleteDealProductInput!): DealProduct!
  deletePartner(data: DeletePartnerInput!): Partner!

  """
  Delete a partner's deal category resolver. you should be a partner master and be authenticated to execute it.
  """
  deletePartnerDealCategory(data: DeletePartnerDealCategoryInput!): PartnerDealCategory!
  deleteSimulation(data: DeleteSimulationInput!): Simulation
  editDealProduct(data: EditDealProductInput!): DealProduct!
  getPriceTableSimulation(data: GetSimulationInstallmentsInput!): [Installment!]!
  getSACSimulation(data: GetSimulationInstallmentsInput!): [Installment!]!
  login(data: AuthenticationCompanyInput!): Login!
  loginPartner(data: AuthenticatePartnerInput!): AuthenticatePartnerSchema!
  recoverPartnerPassword(data: RecoverPartnerPasswordInput!): Partner!
  recoverPassword(data: RecoverPasswordInput!): Company!
  removeProfilePicture: Company!
  requestCreateCompany(data: RequestCreateCompanyInput!): Boolean!
  requestPartnerRecoverPassword(data: RequestPartnerRecoverPasswordInput!): Boolean!
  requestRecoverPassword(data: RequestRecoverPasswordInput!): RequestRecoverPasswordResponse!
  setProfilePicture(data: FileInput!): Boolean!
  switchDealCategoryVisibility(data: SwitchDealCategoryVisibilityInput!): DealCategory!
  togglePartnerDealCategories(data: TogglePartnerDealCategoriesInput!): [PartnerDealCategory!]
  updateDealComment(data: UpdateBitrixDealCommentsInput!): BitrixDeal!
  updateLeftingCompanyFields: Boolean!
  updateProfile(data: UpdateCompanyProfileInput!): Company!
}

"""Partner Schema"""
type Partner {
  avatarBitrixFileID: Float

  """The ID returned from Bitrix platform"""
  bitrix_id: Int

  """The partner's company name"""
  companyName: String!
  cpf_cnpj: String!
  createdAt: DateTime
  createdBy: Partner
  dealCategories: [PartnerDealCategory!]

  """The partner's email"""
  email: String!
  id: ID!
  isSuspended: Boolean
  logoBitrixFileID: Float

  """The partner name"""
  name: String!

  """The hashed Partner password. It should not be returned at any request"""
  password: String!
  phone: String!

  """Primary color value (hex)"""
  primaryColor: String!
  roleID: Role

  """Secondary color value (hex"""
  secondaryColor: String!
  simulations: [Simulation!]
  siteURL: String!
  updatedAt: DateTime
}

"""Partner deals categories"""
type PartnerDealCategory {
  createdAt: DateTime!
  dealCategory: DealCategory!
  id: ID!
  isVisible: Boolean!
  updatedAt: DateTime!
}

"""Partner information Schema"""
type PartnerInformationSchema {
  """Partner's company name"""
  companyName: String!
  id: ID!

  """Partner's name"""
  name: String!
}

"""Colors and images to use in the partner platform"""
type PartnerStyleSchema {
  logoURL: String!
  primaryColor: String!
  secondaryColor: String!
}

type Query {
  getBasicCompanies: [BasicCompany!]
  getBitrixDealFieldItems(data: GetBitrixDealFieldItemsInput!): [BitrixDealFieldItem!]
  getBitrixDealFields: [BitrixDealField!]
  getBitrixDealsCategories: [BitrixDealCategory!]!
  getCompanyContact(data: GetCompanyContactInput!): BitrixContact!
  getCompanyInfo(data: GetCompanyInfoInput!): Company!
  getCompanyRole: Role!
  getContacts(data: GetContactsInput!): GetContactsResponse!
  getDealCategoryStages(data: GetDealCategoryStageInput!): [DealCategoryStage!]
  getDeals(data: GetDealsInput!): GetDealsResponse
  getDealsCategories: [DealCategory!]
  getDealsProducts: [DealProduct!]

  """The company should use this resolver to get your deals"""
  getDealsUpdated(data: GetDealsUpdatedInput!): GetDealsResponse

  """
  Query a partner. You should pass a bearer authorization in the header body
  """
  getPartner: Partner

  """Get partner's deals"""
  getPartnerDeals(data: GetPartnerDealsInput!): GetPartnerDealsSchema!
  getPartnerDealsInformation: GetPartnerDealsInformationSchema!

  """Get partner information query"""
  getPartnerInformation(data: GetPartnerInformationInput!): PartnerInformationSchema!

  """Get partner platform logo query"""
  getPartnerPlatformLogo(data: GetPlatformLogoInput!): String!
  getPartnerStyle(data: GetPartnerStyleInput!): PartnerStyleSchema!
  getRoles: [Role!]
  getSELICRate: SELICRate!
  getSimulations: [Simulation!]
  getVehicularDeals(data: GetDealsInput!): GetDealsResponse

  """
  List the partner's associate. To use this query, you should use the authentication token
  """
  listAssociates: [Partner!]
  listPartnerContacts(data: ListPartnerContactsInput!): ListPartnerContactsSchema
  listPartnerDealsCategories: [PartnerDealCategory!]
  listPartnerSimulations: [Simulation!]
  listPartners: [Partner!]
  listTimeLineComments(data: ListDealTimelineCommentsInput!): ListDealCommentsTimeLineSchema!
  verifyIfCompanySawTutorial: Boolean!
}

input RecoverPartnerPasswordInput {
  newPassword: String!
  token: String!
}

"""Recover Password Args"""
input RecoverPasswordInput {
  """Company email to recover"""
  password: String!

  """Token sent to company's email"""
  token: String!
}

"""Request create company service args"""
input RequestCreateCompanyInput {
  eduzzBillID: Int!
  email: String!

  """
  If you do not configure the time to expire token, the system will create a token to expire in 30 days
  """
  expiresIn: String
  haveLifetimeAccess: Boolean
  name: String!
  recurrence_code: Int
}

"""Recover partner password input arguments"""
input RequestPartnerRecoverPasswordInput {
  email: String!
}

"""Request Recover Password Args"""
input RequestRecoverPasswordInput {
  """Company email to recover"""
  email: String!
}

"""Response for request recover company's password"""
type RequestRecoverPasswordResponse {
  wasMailSent: Boolean!
}

"""The user role schema"""
type Role {
  companies: [Company!]

  """Created date of the model"""
  createdAt: DateTime
  id: ID!

  """The role name"""
  name: String!

  """The role permissions"""
  permissions: Int!

  """Created date of the model"""
  updatedAt: DateTime
}

"""The SELIC rate"""
type SELICRate {
  date: String!
  value: Float!
}

"""Simulation Schema"""
type Simulation {
  amortizationType: Int!
  averageRate: Float!
  birthday: DateTime!
  company: String!
  competitiveRate: Float!
  cpf_cnpj: String!

  """Created date of the model"""
  createdAt: DateTime
  dealCategory: DealCategory!
  dealProduct: DealProduct
  email: String!
  id: ID!
  name: String!
  numberOfInstallments: Int!
  personType: String!
  phone: String!
  selicRate: Float!

  """Created date of the model"""
  updatedAt: DateTime
  value: Float!
}

"""Switch deal category visibility input"""
input SwitchDealCategoryVisibilityInput {
  dealCategoryID: String!
}

"""Toggle partner deal categories mutation arguments"""
input TogglePartnerDealCategoriesInput {
  togglePartnerDealCategorySchemas: [TogglePartnerDealCategorySchema!]!
}

"""Toggle partner deal category schema"""
input TogglePartnerDealCategorySchema {
  checked: Boolean!
  dealCategoryID: String!
}

"""Update Bitrix Deal Comments Arguments"""
input UpdateBitrixDealCommentsInput {
  comment: String!
  id: Int!
}

"""Update Company Profile Args"""
input UpdateCompanyProfileInput {
  name: String!
  password: String!
  personName: String!
  phone: String!
}
